diff --git a/server/Android.mk b/server/Android.mk
index 55aa87c..fc65731 100644
--- a/server/Android.mk
+++ b/server/Android.mk
@@ -25,7 +25,7 @@ LOCAL_C_INCLUDES := \
         system/netd/include \
 
 LOCAL_CLANG := true
-LOCAL_CPPFLAGS := -std=c++11 -Wall -Werror
+LOCAL_CPPFLAGS := -std=c++11 -Wall -Werror -Wno-missing-field-initializers
 LOCAL_MODULE := netd
 
 LOCAL_SHARED_LIBRARIES := \
diff --git a/server/RouteController.cpp b/server/RouteController.cpp
index 140c0d3..40b5181 100644
--- a/server/RouteController.cpp
+++ b/server/RouteController.cpp
@@ -182,10 +182,11 @@ void updateTableNamesFile() {
 // The netlink header is generated by this function based on |action| and |flags|.
 // Returns -errno if there was an error or if the kernel reported an error.
 WARN_UNUSED_RESULT int sendNetlinkRequest(uint16_t action, uint16_t flags, iovec* iov, int iovlen) {
-    nlmsghdr nlmsg = {
-        .nlmsg_type = action,
-        .nlmsg_flags = flags,
-    };
+    nlmsghdr nlmsg;
+//    = {
+//        .nlmsg_type = action,
+//        .nlmsg_flags = flags,
+//    };
     iov[0].iov_base = &nlmsg;
     iov[0].iov_len = sizeof(nlmsg);
     for (int i = 0; i < iovlen; ++i) {
@@ -282,10 +283,11 @@ WARN_UNUSED_RESULT int modifyIpRule(uint16_t action, uint32_t priority, uint32_t
     bool isUidRule = (uidStart != INVALID_UID);
 
     // Assemble a rule request and put it in an array of iovec structures.
-    fib_rule_hdr rule = {
-        .action = static_cast<uint8_t>(table != RT_TABLE_UNSPEC ? FR_ACT_TO_TBL :
-                                                                  FR_ACT_UNREACHABLE),
-    };
+    fib_rule_hdr rule;
+//      = {
+//        .action = static_cast<uint8_t>(table != RT_TABLE_UNSPEC ? FR_ACT_TO_TBL :
+//                                                                  FR_ACT_UNREACHABLE),
+//    };
 
     rtattr fraIifName = { U16_RTA_LENGTH(iifLength), FRA_IIFNAME };
     rtattr fraOifName = { U16_RTA_LENGTH(oifLength), FRA_OIFNAME };
@@ -389,13 +391,14 @@ WARN_UNUSED_RESULT int modifyIpRoute(uint16_t action, uint32_t table, const char
     }
 
     // Assemble a rtmsg and put it in an array of iovec structures.
-    rtmsg route = {
-        .rtm_protocol = RTPROT_STATIC,
-        .rtm_type = type,
-        .rtm_family = family,
-        .rtm_dst_len = prefixLength,
-        .rtm_scope = static_cast<uint8_t>(nexthop ? RT_SCOPE_UNIVERSE : RT_SCOPE_LINK),
-    };
+    rtmsg route;
+//    = {
+//        .rtm_protocol = RTPROT_STATIC,
+//        .rtm_type = type,
+//        .rtm_family = family,
+//        .rtm_dst_len = prefixLength,
+//        .rtm_scope = static_cast<uint8_t>(nexthop ? RT_SCOPE_UNIVERSE : RT_SCOPE_LINK),
+//    };
 
     rtattr rtaDst     = { U16_RTA_LENGTH(rawLength), RTA_DST };
     rtattr rtaGateway = { U16_RTA_LENGTH(rawLength), RTA_GATEWAY };
@@ -789,7 +792,7 @@ WARN_UNUSED_RESULT int flushRules() {
 // Returns 0 on success or negative errno on failure.
 WARN_UNUSED_RESULT int modifyRoute(uint16_t action, const char* interface, const char* destination,
                                    const char* nexthop, RouteController::TableType tableType) {
-    uint32_t table;
+    uint32_t table = 0;
     switch (tableType) {
         case RouteController::INTERFACE: {
             table = getRouteTableForInterface(interface);
